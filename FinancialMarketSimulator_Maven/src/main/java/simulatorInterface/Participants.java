/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simulatorInterface;

import financialmarketsimulator.exception.NotEnoughDataException;
import financialmarketsimulator.market.MarketExchange;
import financialmarketsimulator.market.MarketParticipant;
import financialmarketsimulator.market.MarketStrategy;
import financialmarketsimulator.market.StockManager;
import financialmarketsimulator.marketData.XStreamTranslator;
import financialmarketsimulator.strategies.DirectionalMovementIndex;
import financialmarketsimulator.strategies.MACDStrategy;
import financialmarketsimulator.strategies.MovingAverageCrossover;
import financialmarketsimulator.strategies.MovingAverageEnvelope;
import financialmarketsimulator.strategies.MovingAverageFilter;
import financialmarketsimulator.strategies.Phantom;
import financialmarketsimulator.strategies.PriceEmaCrossover;
import financialmarketsimulator.strategies.PriceSmaCrossover;
import financialmarketsimulator.strategies.SimpleRSI;
import financialmarketsimulator.strategies.Simple_MACD_ADX;
import java.awt.Cursor;
import java.awt.Frame;
import static java.awt.Frame.getFrames;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Siphe
 */
public class Participants extends javax.swing.JFrame {

    ArrayList<MarketParticipant> participants = new ArrayList();
    MarketExchange exchange = MarketExchange.getInstance("JSE");

    /**
     * Creates new form Participants
     */
    public Participants() {
        initComponents();
        Frame[] frames = getFrames();

        if (frames.length > 0) {
            frames[0].setResizable(false);
        }

        Cursor cursor = Cursor.getDefaultCursor();
        //change cursor appearance to HAND_CURSOR when the mouse pointed on images
        cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
        setCursor(cursor);

        Map<String, StockManager> mang = exchange.getStocksManagers();

        for (StockManager val : mang.values()) {
            cbxStocks.addItem(val.getStockName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cbxStrategies = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbxStocks = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbxParticipantList = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Select Participants");
        jLabel1.setToolTipText("Select Market Participants to trade");

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 255, 0));
        jButton1.setText("Custom");
        jButton1.setToolTipText("Create custom Market Participant");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 255, 0));
        jButton2.setText("Add Participant");
        jButton2.setToolTipText("Create custom Market Participant");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cbxStrategies.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Phantom", "MACDStrategy", "DirectionalMovementIndex", "MovingAverageCrossover", "MovingAverageEnvelope", "MovingAverageFilter", "PriceEmaCrossover", "PriceSmaCrossover", "SimpleRSI", "Simple_MACD_ADX" }));

        jLabel2.setText("Strategy:");

        jLabel3.setText("Stock:");

        jLabel4.setText("Name:");

        jLabel5.setText("ID:");

        jButton3.setBackground(new java.awt.Color(153, 255, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("NEXT -->");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 255, 153));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("<-- BACK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lbxParticipantList);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Participants");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbxStrategies, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel3))
                                                .addGap(34, 34, 34)
                                                .addComponent(cbxStocks, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(1, 1, 1)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(132, 132, 132))))
            .addGroup(layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxStocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxStrategies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(26, 26, 26)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        /*File folder = new File("Persistent Storage\\Participants");
        File[] listOfFiles = folder.listFiles();
        
        if (listOfFiles.length == 0)
        {
            MessageBox.infoBox("Please add a participant", "No participants were loaded.");
            return;
        }
        else
        {
            XStreamTranslator x = new XStreamTranslator();
            for (int i = 0; i < listOfFiles.length; i++) {
             if (listOfFiles[i].isFile()) {
                 try {
                     System.out.println("File " + listOfFiles[i].getName());
                     MarketParticipant p = (MarketParticipant)x.toObject(listOfFiles[i]);
                     if (participants.contains(p) || p == null)
                     {
                         System.out.println("P is null");
                         break;
                     }
                     else
                     {
                        participants.add(p);
                        System.out.println("added participant" + listOfFiles[i].getName());
                        DefaultListModel model = new DefaultListModel();
                     
                        for (MarketParticipant part : participants) {
                             model.addElement(part.toString());
                        }
                     
                        lbxParticipantList.setModel(model);
                       MessageBox.infoBox(listOfFiles.length+ " participants were loaded.", "Participants loaded...");*
                       return;
                     }
                 } catch (IOException ex) {
                     Logger.getLogger(Participants.class.getName()).log(Level.SEVERE, null, ex);
                 }
             }
            }
        }*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        MarketStrategy strategy = null;

        String strat = cbxStrategies.getSelectedItem().toString().trim();
        String stockName = cbxStocks.getSelectedItem().toString().trim();
        String partName = txtName.getText().trim();
        String ID = txtID.getText().trim();

        if ("".equals(strat)) {
            MessageBox.infoBox("Please select a strategy", "No Strategy Selected");
            return;
        } else if ("".equals(stockName)) {
            MessageBox.infoBox("Please select a stock", "No Stock Selected");
            return;
        } else if ("".equals(ID) || "".equals(partName)) {
            MessageBox.infoBox("Please enter Name and ID", "Missing fields");
            return;
        } else if (!exchange.stockFound(stockName)) {
            MessageBox.infoBox("Selected stock does not exist please create it.", "Stock not Found");
            return;
        }

        for (MarketParticipant part : participants) {
            if (part.getParticipantID().equals(ID) && part.getStock().equals(stockName)) {
                MessageBox.infoBox("Market Participant ID's must be unique", "Duplicate ID's found");
                return;
            }
        }

        switch (strat) {
            case "Phantom":
                strategy = new Phantom();
                break;
            case "DirectionalMovementIndex":
                strategy = new DirectionalMovementIndex(exchange.getBook(stockName), 14);
                break;
            case "MACDStrategy":
                try {
                    strategy = new MACDStrategy(exchange.getBook(stockName));
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create MACD Strategy", "");
                }
                break;
            case "MovingAverageCrossover":
                try {
                    strategy = new MovingAverageCrossover(exchange.getBook(stockName), 14);
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create MovingAverageCrossover Strategy", "");
                }
                break;
            case "MovingAverageEnvelope":
                try {
                    strategy = new MovingAverageEnvelope(exchange.getBook(stockName));
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create Moving Average Envelope Strategy", "");
                }
                break;
            case "MovingAverageFilter":
                try {
                    strategy = new MovingAverageFilter(exchange.getBook(stockName), 14);
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create Moving Average Filter Strategy", "");
                }
                break;
            case "PriceEmaCrossover":
                try {
                    strategy = new PriceEmaCrossover(exchange, exchange.getBook(stockName), 14);
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create Price EMA Crossover Strategy", "");
                }
                break;
            case "PriceSmaCrossover":
                strategy = new PriceSmaCrossover(exchange, exchange.getBook(stockName), 14);
                break;
            case "SimpleRSI":
                try {
                    strategy = new SimpleRSI(exchange.getBook(stockName));
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create Simple RSI Strategy", "");
                }
                break;
            case "Simple_MACD_ADX":
                try {
                    strategy = new Simple_MACD_ADX(exchange.getBook(stockName));
                } catch (NotEnoughDataException ex) {
                    MessageBox.infoBox("Insufficient Data to create Simple MACD ADX Strategy", "");
                }
                break;
            default:
                MessageBox.infoBox("Strategy does not exist.", "Strategy not found");
                return;
        }
        try {
            MarketParticipant participant = new MarketParticipant(partName, ID, exchange, stockName, strategy);

            participants.add(participant);

            DefaultListModel model = new DefaultListModel();

            for (MarketParticipant part : participants) {
                model.addElement(part.toString());
            }

            lbxParticipantList.setModel(model);

        } catch (NotEnoughDataException ex) {
            MessageBox.infoBox("Market Participant not created.", "Not enough data");
        } catch (IOException ex) {
            Logger.getLogger(Participants.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if(participants.size() <= 0){
            MessageBox.infoBox("No Participants were added", "No Participants added");
            return;
        }
        for (MarketParticipant marketParticipant : participants) {
            StockManager manager = exchange.getManager(marketParticipant.getStock());
            if (manager == null) {
                MessageBox.infoBox("Stock Manager does not exist for specified stock", "Invalid Stock");
                return;
            }
            manager.attach(marketParticipant);
        }

        dispose();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunSimulation().setVisible(true);
            }
        });
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        dispose();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stocks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Stocks().setVisible(true);
            }
        });
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Participants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Participants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Participants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Participants.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Participants().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxStocks;
    private javax.swing.JComboBox cbxStrategies;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lbxParticipantList;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
