package simulatorInterface;

import com.grape.financialmarketsimulator_maven.MultiLineChart;
import com.grape.financialmarketsimulator_maven.PriceMultiLineChart;
import financialmarketsimulator.exception.NotEnoughDataException;
import financialmarketsimulator.indicators.ADX;
import financialmarketsimulator.indicators.ATR;
import financialmarketsimulator.indicators.DirectionalIndex;
import financialmarketsimulator.indicators.EMA;
import financialmarketsimulator.indicators.MACD;
import financialmarketsimulator.indicators.NDI;
import financialmarketsimulator.indicators.NDM;
import financialmarketsimulator.indicators.PDI;
import financialmarketsimulator.indicators.PDM;
import financialmarketsimulator.indicators.RSI;
import financialmarketsimulator.indicators.SMA;
import financialmarketsimulator.indicators.StochasticOscillator;
import financialmarketsimulator.indicators.Volatility;
import financialmarketsimulator.market.MarketExchange;
import financialmarketsimulator.market.MarketIndicator;
import financialmarketsimulator.market.MarketParticipant;
import financialmarketsimulator.market.StockManager;
import java.awt.Cursor;
import java.awt.Frame;
import static java.awt.Frame.getFrames;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import org.jfree.ui.RefineryUtilities;

public class RunSimulation extends javax.swing.JFrame {

    private MarketExchange exchange;
    private MultiLineChart chart = null;
    private PriceMultiLineChart pchart = null;
    private MarketData marketData = null;

    /**
     * Creates new form RunSimulation
     */
    public RunSimulation() {
        initComponents();
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);

        Frame[] frames = getFrames();

        if (frames.length > 0) {
            frames[0].setResizable(false);
        }

        Cursor cursor = Cursor.getDefaultCursor();
        //change cursor appearance to HAND_CURSOR when the mouse pointed on images
        cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
        setCursor(cursor);

        exchange = MarketExchange.getInstance("JSE");
        chart = null;
        pchart = null;
        marketData = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(0, 255, 51));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("START");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Simulation");
        jLabel1.setToolTipText("Select Market Participants to trade");

        jButton2.setBackground(new java.awt.Color(255, 255, 0));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setText("PAUSE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton3.setText("STOP");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 255, 153));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("HOME -->");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(153, 255, 153));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setText("<-- BACK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        dispose();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Participants.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Participants.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Participants.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Participants.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Participants().setVisible(true);
            }
        });
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            jButton1.setEnabled(false);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);

            if (marketData == null) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
                 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                 */
                try {
                    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            javax.swing.UIManager.setLookAndFeel(info.getClassName());
                            break;

                        }
                    }
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(MarketData.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    java.util.logging.Logger.getLogger(MarketData.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    java.util.logging.Logger.getLogger(MarketData.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                    java.util.logging.Logger.getLogger(MarketData.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        marketData = new MarketData();
                        marketData.setVisible(true);
                        ArrayList<MarketParticipant> participants = exchange.getAllParticipants();
                        Collection<StockManager> managers = exchange.getStocksManagers().values();
                        marketData.populateTable(participants, managers);
                    }
                });
            } else {
                marketData.setVisible(true);
            }

            //Updates the GUI very 3 seconds
            Runnable updateGUI = new Runnable() {
                @Override
                public void run() {
                    synchronized (this) {
                        ArrayList<MarketParticipant> participants = exchange.getAllParticipants();
                        Collection<StockManager> managers = exchange.getStocksManagers().values();
                        if (marketData != null) {
                            marketData.updateGUI(participants, managers);
                        }
                    }
                }
            };

            ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
            executor.scheduleAtFixedRate(updateGUI, 0, 3, TimeUnit.SECONDS);

        } catch (Exception e) {
            if (marketData != null) {
                marketData.dispose();
                exchange.clearStocks();
                exchange = null;
                MessageBox.infoBox("Simualtor has ran out of Memory", "Out of Running");
            }
        }

        Vector<MarketIndicator> ind = new Vector<>();

        ind.add(new ADX(exchange.getBook("INV"), 14));
        ind.add(new ATR(exchange.getBook("INV"), 14));
        //ind.add(new BollingerBands(exchange.getBook("INV")));
        ind.add(new DirectionalIndex(exchange.getBook("INV"), 14));
        ind.add(new EMA(exchange.getBook("INV"), 14));
        ind.add(new MACD(exchange.getBook("INV")));
        ind.add(new NDI(exchange.getBook("INV"), 14));
        ind.add(new NDM(exchange.getBook("INV"), 14));
        ind.add(new PDI(exchange.getBook("INV"), 14));
        ind.add(new PDM(exchange.getBook("INV"), 14));
        ind.add(new RSI(exchange.getBook("INV"), 14));
        ind.add(new SMA(exchange.getBook("INV"), 14));
        ind.add(new StochasticOscillator(exchange.getBook("INV")));
        ind.add(new Volatility(14, exchange.getBook("INV")));

        /*
         Vector<String> indNames = new Vector<>();
        
         indNames.add("ADX Movement");
         indNames.add("ATR Movement");
         //indNames.add("Bollinger Movement");
         indNames.add("Directional Movement");
         indNames.add("EMA Movement");
         indNames.add("MACD Movement");
         indNames.add("NDI Movement");
         indNames.add("NDM Movement");
         indNames.add("PDI Movement");
         indNames.add("PDM Movement");
         indNames.add("RSI Movement");
         indNames.add("SMA Movement");
         indNames.add("Stochastic Movement");
         indNames.add("Volatitlity Movement");*/
        //try
        //{
        //chart = new MultiLineChart(ind, indNames, "Indicators", -50, 100);
        //chart.pack();
        //RefineryUtilities.centerFrameOnScreen(chart);
        //chart.setVisible(true);
        //}
        //catch(Exception ex)
        //{
        //ex.printStackTrace();
        //}
        //Vector<StockManager> man = new Vector<StockManager>();
        //for (StockManager stockmanager : exchange.getStocksManagers().values()) {
        //man.add(stockmanager);
        //}
        //Vector<String> manNames = new Vector<>();
        //for (StockManager stockmanager : exchange.getStocksManagers().values()) {
        //manNames.add(stockmanager.getStockName());
        //}
        if (pchart != null) {
            //try {
            //pchart = new PriceMultiLineChart(man, manNames, "Stock Prices", 0, 30);
            //pchart.pack();
            //RefineryUtilities.centerFrameOnScreen(pchart);
            //pchart.setDefaultCloseOperation(HIDE_ON_CLOSE);
            //pchart.setVisible(true);
            //} //catch (NotEnoughDataException ex) {
            //Logger.getLogger(RunSimulation.class
            //   .getName()).log(Level.SEVERE, null, ex);
            //}
        } //else {
        //pchart.setVisible(true);
        //}

        exchange.openMarket();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        exchange.pause();

        jButton2.setEnabled(false);
        jButton1.setEnabled(true);
        jButton3.setEnabled(true);

        if (marketData != null) {
            marketData.setVisible(false);
        }

        if (chart != null) {
            chart.setVisible(false);
        }

        if (pchart != null) {
            pchart.setVisible(false);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        exchange.stop();
        exchange.clearStocks();
        exchange = null;

        jButton2.setEnabled(false);
        jButton1.setEnabled(false);
        jButton3.setEnabled(false);

        if (marketData != null) {
            marketData.dispose();
            marketData = null;
        }

        if (chart != null) {
            chart.dispose();
            chart = null;
        }
        if (pchart != null) {
            pchart.dispose();
            pchart = null;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunSimulation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunSimulation().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
