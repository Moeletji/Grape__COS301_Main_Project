/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simulatorInterface;

import com.grape.financialmarketsimulator_maven.MultiLineChart;
import financialmarketsimulator.exception.NotEnoughDataException;
import financialmarketsimulator.indicators.EMA;
import financialmarketsimulator.indicators.MACD;
import financialmarketsimulator.indicators.SMA;
import financialmarketsimulator.market.MarketEntryAttemptBook;
import financialmarketsimulator.market.MarketExchange;
import financialmarketsimulator.market.MarketIndicator;
import financialmarketsimulator.market.MarketParticipant;
import financialmarketsimulator.market.StockManager;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Daniel Makgonta
 */
public class MarketData extends javax.swing.JFrame {

    private MarketExchange exchange;
    MultiLineChart chart = null;

    /**
     * Creates new form MarketData
     */
    public MarketData() {
        initComponents();

        exchange = MarketExchange.getInstance("JSE");

        String[] colums = {"Name", "Last Price", "Low", "High"};
        Object[][] table = new Object[0][colums.length];
        DefaultTableModel model = new DefaultTableModel(table, colums);
        tblStockList.setModel(model);

        String[] colums1 = {"Name", "ID", "Profit", "     %     "};
        Object[][] table1 = new Object[0][colums1.length];
        DefaultTableModel model1 = new DefaultTableModel(table1, colums1);
        tblParticipantList.setModel(model1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblParticipantList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStockList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblParticipantList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "ID", "Profit", "          %"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblParticipantList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Stock List");
        jLabel1.setToolTipText("Select Market Participants to trade");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Market Data");
        jLabel2.setToolTipText("Select Market Participants to trade");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Participant List");
        jLabel3.setToolTipText("Select Market Participants to trade");

        tblStockList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblStockList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(406, 406, 406))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarketData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarketData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarketData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarketData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarketData().setVisible(true);
            }
        });
    }

    public void populateTable(ArrayList<MarketParticipant> participants, Collection<StockManager> managers) {
        String[] names = {"Name", "ID", "Profit", "     %     "};

        Object[][] p = new Object[participants.size()][names.length];

        int i = 0;

        for (MarketParticipant part : participants) {

            String name = part.getParticipantName();
            //You dont have to view the data generated by the phantom.
            if (name.equals("Phantom")) {
                continue;
            }

            String id = part.getParticipantID();
            String profit_loss = "";
            double profit = exchange.getProfit(part.getParticipantID());

            if (profit < 1) {
                profit_loss = "Loss";
            } else if (profit > 1) {
                profit_loss = "Profit";
            } else {
                profit_loss = "No Profit or Loss";
            }

            p[i][0] = name;
            p[i][1] = id;
            p[i][2] = profit_loss;
            p[i][3] = profit * 100;

            i++;
        }

        DefaultTableModel model = new DefaultTableModel(p, names);
        tblParticipantList.setModel(model);

        String[] colums1 = {"Name", "Last Price", "Low", "High"};
        Object[][] table1 = new Object[managers.size()][colums1.length];

        i = 0;

        for (StockManager manager : managers) {
            MarketEntryAttemptBook book = manager.getOrderList();
            String stockName = manager.getStockName();

            double lastPrice = book.getLastTradePrice();
            double low = manager.getOrderList().getHighestTradedPrice();
            double high = manager.getOrderList().getLowestTradedPrice();

            table1[i][0] = stockName;
            table1[i][1] = lastPrice;
            table1[i][2] = String.valueOf(low);
            table1[i][3] = String.valueOf(high);

            i++;
        }

        DefaultTableModel model1 = new DefaultTableModel(table1, colums1);
        tblStockList.setModel(model1);

        String stockName = "";
        int row = tblStockList.getSelectedRow();
        int col = 0;

        /*if (row >= 0 && col >= 0 && row < tblStockList.getModel().getRowCount() && col < tblStockList.getModel().getColumnCount()) {
            stockName = tblStockList.getModel().getValueAt(row, col).toString().trim();
            if (!"".equals(stockName)) {
                displayChart(stockName);
            }
        }*/
    }

    public void updateGUI(ArrayList<MarketParticipant> participants, Collection<StockManager> managers) {

        DefaultTableModel dm = (DefaultTableModel) tblParticipantList.getModel();

        int participantRow = 0;
        int profitLostColumn = 2;
        int percentageProfitColumn = 3;

        for (MarketParticipant part : participants) {
            if (participantRow < dm.getRowCount()) {
                String name = part.getParticipantName();
                //You dont have to view the data generated by the phantom.
                if (name.equals("Phantom")) {
                    continue;
                }

                String id = part.getParticipantID();
                String profit_loss = "";
                double profit = exchange.getProfit(part.getParticipantID());

                if (profit < 1) {
                    profit_loss = "Loss";
                } else if (profit > 1) {
                    profit_loss = "Profit";
                } else {
                    profit_loss = "No Profit or Loss";
                }
                
                if(profit > 1){
                    profit = Math.abs(profit - 1);
                }else{
                    profit = Math.abs(1 - profit);
                }

                SetData(tblParticipantList, String.valueOf(profit_loss), participantRow, profitLostColumn);
                SetData(tblParticipantList, String.valueOf(profit), participantRow, percentageProfitColumn);

                participantRow++;
            }
        }


        DefaultTableModel dmm = (DefaultTableModel) tblStockList.getModel();

        int rowStock = 0;
        int lastPriceColumn = 1;
        int lowPriceColumn = 2;
        int highPriceColumn = 3;

        for (StockManager manager : managers) {
            if (rowStock < dmm.getRowCount()) {
                MarketEntryAttemptBook book = manager.getOrderList();

                double lastPrice = book.getLastTradePrice();
                double low = manager.getOrderList().getLowestTradedPrice();
                double high = manager.getOrderList().getHighestTradedPrice();

                SetData(tblStockList, String.valueOf(lastPrice), rowStock, lastPriceColumn);
                SetData(tblStockList, String.valueOf(low), rowStock, lowPriceColumn);
                SetData(tblStockList, String.valueOf(high), rowStock, highPriceColumn);

                rowStock++;
            }
        }
    }
    
    private void SetData(JTable table, Object obj, int row_index, int col_index) {
        table.getModel().setValueAt(obj, row_index, col_index);
    }

    /*private void displayChart(String stockName) {

        if (!"".equals(stockName)) {

            Vector<MarketIndicator> ind = new Vector<>();
            try {
                if (exchange.stockFound(stockName)) {
                    //Creating multi line graphs
                    EMA ema = new EMA(exchange.getBook(stockName), 14);
                    SMA sma = new SMA(exchange.getBook(stockName), 14);
                    MACD macd = new MACD(exchange.getBook(stockName));

                    ind.add(ema);
                    ind.add(sma);
                    ind.add(macd);

                    Vector<String> indNames = new Vector<>();

                    indNames.add("EMA Movement");
                    indNames.add("SMA Movement");
                    indNames.add("MACD Movement");

                    if (chart == null) {
                        try {
                            chart = new MultiLineChart(ind, indNames, "Indicators", -50, 50);
                            chart.pack();
                            RefineryUtilities.centerFrameOnScreen(chart);
                            pnlGraphPanel = chart.getContent();
                            pnlGraphPanel.setVisible(true);
                        } catch (NotEnoughDataException ex) {
                            Logger.getLogger(RunSimulation.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        pnlGraphPanel = chart.getContent();
                        pnlGraphPanel.setVisible(true);
                    }
                }
            } catch (NotEnoughDataException ex) {
                Logger.getLogger(RunSimulation.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
        }
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblParticipantList;
    private javax.swing.JTable tblStockList;
    // End of variables declaration//GEN-END:variables
}
